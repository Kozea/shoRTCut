// Generated by CoffeeScript 1.6.3
(function() {
  var FileBuilder, FileReceiver, LocalBinaryChannel, LocalTextChannel, RTCTest, RemoteBinaryChannel, RemoteTextChannel, bytes, chat, chat_send, chunk_size, chunks, file_receiver, file_send, files, flush_length, rfs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  rfs = window.requestFileSystem || window.webkitRequestFileSystem;

  chunk_size = 16000;

  flush_length = 256000 / chunk_size;

  chunks = function(size, chunk) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; chunk > 0 ? _i <= size : _i >= size; i = _i += chunk) {
      _results.push([i, Math.min(i + chunk, size)]);
    }
    return _results;
  };

  chat = function(text, type) {
    var $sb;
    if (type == null) {
      type = 'text';
    }
    $sb = $('.scrollback');
    $sb.append($('<div>')[type](text));
    return $sb.stop(true, true).animate({
      scrollTop: $sb.prop('scrollHeight') - $sb.height()
    });
  };

  chat_send = null;

  file_send = null;

  file_receiver = null;

  files = [];

  bytes = function(size) {
    var byteUnits, i;
    i = -1;
    byteUnits = [" kB", " MB", " GB", " TB", "PB", "EB", "ZB", "YB"];
    while (true) {
      size /= 1000;
      i++;
      if (!(size > 1000)) {
        break;
      }
    }
    return Math.max(size, 0.1).toFixed(1) + byteUnits[i];
  };

  RemoteTextChannel = (function(_super) {
    __extends(RemoteTextChannel, _super);

    function RemoteTextChannel() {
      RemoteTextChannel.__super__.constructor.apply(this, arguments);
      chat_send = this.send.bind(this);
    }

    RemoteTextChannel.prototype.open = function() {
      RemoteTextChannel.__super__.open.apply(this, arguments);
      return chat('Chat Connected');
    };

    RemoteTextChannel.prototype.close = function() {
      RemoteTextChannel.__super__.close.apply(this, arguments);
      return chat('Chat Connection closed.');
    };

    return RemoteTextChannel;

  })(ShoRTCut.prototype.TextChannel);

  LocalTextChannel = (function(_super) {
    __extends(LocalTextChannel, _super);

    function LocalTextChannel() {
      LocalTextChannel.__super__.constructor.apply(this, arguments);
    }

    LocalTextChannel.prototype.open = function() {
      LocalTextChannel.__super__.open.apply(this, arguments);
      return $('input[name=local]').attr('disabled', null).on('keyup', function(e) {
        if (e.keyCode === 13 && $(this).val()) {
          chat_send('CHAT', $(this).val());
          chat('me   < ' + $(this).val());
          return $(this).val('');
        }
      });
    };

    LocalTextChannel.prototype.CHAT = function(message) {
      return chat('peer > ' + message);
    };

    LocalTextChannel.prototype.ACK = function() {
      var file;
      if (!files.length) {
        return;
      }
      file = files[0];
      return chat_send("FILE|" + file.size + "," + file.type + "," + file.name);
    };

    LocalTextChannel.prototype.ACCEPT = function() {
      var $progress, file, file_reader, len, read, slices;
      if (!files.length) {
        return;
      }
      file = files.shift();
      slices = chunks(file.size, chunk_size);
      len = slices.length;
      console.log('sending ', slices.length);
      if (file_reader) {
        console.error('Parallel read');
        return;
      }
      $('.progresses').append($('<tr>').append($('<td>').text("Sending " + file.name), $('<td>').append($progress = $('<progress>', {
        max: 100
      }))));
      file_reader = new FileReader();
      file_reader.onload = function(e) {
        file_send(e.target.result);
        return read();
      };
      return (read = function() {
        var end, slice, start;
        slice = slices.shift();
        $progress.val(100 * (len - slices.length) / len);
        if (slice) {
          start = slice[0], end = slice[1];
          return file_reader.readAsArrayBuffer(file.slice(start, end));
        } else {
          chat("File sent.");
          file_send(new ArrayBuffer(0));
          return false;
        }
      })();
    };

    LocalTextChannel.prototype.FILE = function(message) {
      var $progress, args, end, name, size, type,
        _this = this;
      args = message.split(',');
      size = +args.shift();
      type = args.shift();
      name = args.join(',');
      end = function() {
        chat("peer > File: <a href=\"" + (file_receiver.url()) + "\" download=\"" + file_receiver.name + "\">" + file_receiver.name + "</a>", 'html');
        chat_send('CHAT', "File received ! (received " + (bytes(file_receiver.size)) + ")");
        file_receiver = null;
        return chat_send('ACK');
      };
      $('.progresses').append($('<tr>').append($('<td>').text("Receiving " + name), $('<td>').append($progress = $('<progress>', {
        max: size
      }))));
      if (rfs) {
        return rfs(TEMPORARY, size, function(fs) {
          var get_file;
          chat("Receiving file " + name + " " + (bytes(size)));
          get_file = function() {
            return fs.root.getFile(name, {
              create: true,
              exclusive: true
            }, function(entry) {
              file_receiver = new FileReceiver(entry, name, size, type, end, $progress);
              return chat_send("ACCEPT");
            }, _this.error.bind(_this));
          };
          return fs.root.getFile(name, {
            create: false
          }, function(entry) {
            console.log("Removing existing temp file " + name);
            return entry.remove(get_file, _this.error.bind(_this));
          }, get_file);
        }, this.error.bind(this));
      } else {
        chat("Receiving file " + name + " " + (bytes(size)));
        file_receiver = new FileBuilder(name, size, type, end, $progress);
        return chat_send("ACCEPT");
      }
    };

    LocalTextChannel.prototype.close = function() {
      LocalTextChannel.__super__.close.apply(this, arguments);
      return $('input[name=local]').attr('disabled', 'disabled').off('keyup');
    };

    return LocalTextChannel;

  })(ShoRTCut.prototype.TextChannel);

  RemoteBinaryChannel = (function(_super) {
    __extends(RemoteBinaryChannel, _super);

    function RemoteBinaryChannel() {
      RemoteBinaryChannel.__super__.constructor.apply(this, arguments);
      file_send = this.send.bind(this);
    }

    RemoteBinaryChannel.prototype.open = function() {
      RemoteBinaryChannel.__super__.open.apply(this, arguments);
      return chat('File Connected');
    };

    RemoteBinaryChannel.prototype.close = function() {
      RemoteBinaryChannel.__super__.close.apply(this, arguments);
      return chat('File Connection closed.');
    };

    return RemoteBinaryChannel;

  })(ShoRTCut.prototype.BinaryChannel);

  FileReceiver = (function(_super) {
    __extends(FileReceiver, _super);

    function FileReceiver(entry, name, size, type, end, $progress) {
      this.entry = entry;
      this.name = name;
      this.size = size;
      this.type = type;
      this.end = end;
      this.$progress = $progress;
      this.flushing = false;
      this.parts = [];
      this.length = 0;
      this.callbacks = [];
    }

    FileReceiver.prototype.add = function(part) {
      var parts,
        _this = this;
      this.parts.push(part);
      this.length += part.byteLength;
      this.$progress.val(this.length);
      if (this.parts.length >= flush_length || this.length >= this.size) {
        if (this.flushing) {
          parts = this.parts;
          this.callbacks.push(function() {
            return _this.flush(parts);
          });
        }
        if (this.length >= this.size) {
          this.callbacks.push(this.end);
        }
        if (!this.flushing) {
          this.flush(this.parts);
        }
        return this.parts = [];
      }
    };

    FileReceiver.prototype.flush = function(parts) {
      var blob,
        _this = this;
      if (!parts.length) {
        return;
      }
      if (this.flushing) {
        this.error("Can't flush, already flushing");
      }
      this.flushing = true;
      blob = new Blob(parts, {
        type: this.type
      });
      return this.entry.createWriter(function(fw) {
        fw.onwriteend = function() {
          _this.flushing = false;
          if (_this.callbacks.length) {
            return _this.callbacks.shift()();
          }
        };
        fw.seek(fw.length);
        return fw.write(blob);
      }, this.error.bind(this));
    };

    FileReceiver.prototype.url = function() {
      return this.entry.toURL();
    };

    return FileReceiver;

  })(ShoRTCut.prototype.Loggable);

  FileBuilder = (function(_super) {
    __extends(FileBuilder, _super);

    function FileBuilder(name, size, type, end, $progress) {
      this.name = name;
      this.size = size;
      this.type = type;
      this.end = end;
      this.$progress = $progress;
      this.parts = [];
      this.length = 0;
      this.expected = Math.ceil(this.size / chunk_size);
      console.log('expecting ', this.expected);
    }

    FileBuilder.prototype.add = function(part) {
      this.parts.push(part);
      this.length += part.byteLength;
      this.$progress.val(this.length);
      if (this.length >= this.size) {
        return this.end();
      }
    };

    FileBuilder.prototype.url = function() {
      return URL.createObjectURL(new Blob(this.parts, {
        type: this.type
      }));
    };

    return FileBuilder;

  })(ShoRTCut.prototype.Loggable);

  LocalBinaryChannel = (function(_super) {
    __extends(LocalBinaryChannel, _super);

    function LocalBinaryChannel() {
      LocalBinaryChannel.__super__.constructor.apply(this, arguments);
    }

    LocalBinaryChannel.prototype.open = function() {
      var _this = this;
      LocalBinaryChannel.__super__.open.apply(this, arguments);
      return $('.filedrop').addClass('active').on('dragover', function(e) {
        $(this).addClass('hover');
        e = e.originalEvent;
        e.stopPropagation();
        e.preventDefault();
        e.dataTransfer.dropEffect = 'copy';
        return false;
      }).on('dragleave', function(e) {
        return $(this).removeClass('hover');
      }).on('drop', function(e) {
        var file, _i, _len, _ref;
        $('.filedrop').removeClass('hover');
        e = e.originalEvent;
        e.stopPropagation();
        e.preventDefault();
        _ref = e.dataTransfer.files;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          if (__indexOf.call(files, file) < 0) {
            files.push(file);
          }
        }
        if (files.length) {
          file = files[0];
          chat_send("FILE|" + file.size + "," + file.type + "," + file.name);
        }
        return false;
      });
    };

    LocalBinaryChannel.prototype.binary = function(part) {
      return file_receiver.add(part);
    };

    LocalBinaryChannel.prototype.close = function() {
      LocalBinaryChannel.__super__.close.apply(this, arguments);
      return $('.filedrop').removeClass('active').off('dragover').off('dragleave').off('drop');
    };

    return LocalBinaryChannel;

  })(ShoRTCut.prototype.BinaryChannel);

  RTCTest = (function(_super) {
    __extends(RTCTest, _super);

    function RTCTest() {
      RTCTest.__super__.constructor.apply(this, arguments);
      this.LocalTextChannel = LocalTextChannel;
      this.RemoteTextChannel = RemoteTextChannel;
      this.LocalBinaryChannel = LocalBinaryChannel;
      this.RemoteBinaryChannel = RemoteBinaryChannel;
    }

    RTCTest.prototype.assign_local_stream_url = function(url) {
      chat('Local video connected');
      return $('video.local').attr('src', url);
    };

    RTCTest.prototype.assign_remote_stream_url = function(url) {
      chat('Remote video connected');
      return $('video.remote').attr('src', url);
    };

    RTCTest.prototype.reset = function() {
      RTCTest.__super__.reset.apply(this, arguments);
      chat('--');
      chat('Reset');
      return chat('--');
    };

    RTCTest.prototype.caller = function() {
      return $('h1').text('shoRTCut - caller');
    };

    RTCTest.prototype.callee = function() {
      return $('h1').text('shoRTCut - callee');
    };

    return RTCTest;

  })(ShoRTCut);

  $(function() {
    var rtctest;
    rtctest = new RTCTest();
    rtctest.start();
    chat('Connecting...');
    return window.rtc = rtctest;
  });

}).call(this);
