// Generated by CoffeeScript 1.6.3
var assign_local_stream, connect, error, local_stream, peer, servers, type, ws, ws_message;

type = null;

ws = null;

peer = null;

local_stream = null;

servers = [];

error = function(error) {
  return console.log('Error', error);
};

assign_local_stream = function(stream) {
  console.log('Got local stream', stream);
  $('video.local').attr('src', URL.createObjectURL(stream));
  local_stream = stream;
  connect();
  return ws.send('READY');
};

connect = function() {
  peer = new RTCPeerConnection({
    iceServers: [createIceServer('stun:stun.l.google.com:19302'), createIceServer('turn:' + options.turn_server + '?transport=udp', options.turn_username, options.turn_password)]
  }, {
    optional: [
      {
        DtlsSrtpKeyAgreement: true
      }
    ]
  });
  peer.addStream(local_stream);
  peer.onicecandidate = function(event) {
    console.log('Got ice', event.candidate);
    if (!event.candidate) {
      return;
    }
    return ws.send('ICE|' + JSON.stringify(new RTCIceCandidate(event.candidate)));
  };
  return peer.onaddstream = function(event) {
    console.log('Got remote stream', event.stream);
    return $('video.remote').attr('src', URL.createObjectURL(event.stream));
  };
};

ws_message = function(event) {
  var cmd, data, message, pipe;
  message = event.data;
  pipe = message.indexOf('|');
  if (pipe > -1) {
    cmd = message.substr(0, pipe);
    data = message.substr(pipe + 1);
  } else {
    cmd = message;
    data = '';
  }
  switch (cmd) {
    case 'ECHO':
      return console.log(data);
    case 'INIT':
      return getUserMedia({
        audio: true,
        video: true
      }, assign_local_stream, error);
    case 'START':
      console.log('Creating offer');
      return peer.createOffer(function(desc) {
        console.log('Local desc', desc);
        peer.setLocalDescription(desc);
        return ws.send('CALL|' + JSON.stringify(desc));
      }, error, {
        mandatory: {
          OfferToReceiveAudio: true,
          OfferToReceiveVideo: true
        }
      });
    case 'CALL':
      peer.setRemoteDescription(new RTCSessionDescription(JSON.parse(data)));
      return peer.createAnswer(function(desc) {
        console.log('Local desc', desc);
        peer.setLocalDescription(desc);
        return ws.send('ANSWER|' + JSON.stringify(desc));
      }, error, {
        mandatory: {
          OfferToReceiveAudio: true,
          OfferToReceiveVideo: true
        }
      });
    case 'ANSWER':
      return peer.setRemoteDescription(new RTCSessionDescription(JSON.parse(data)));
    case 'ICE':
      return peer.addIceCandidate(new RTCIceCandidate(JSON.parse(data)));
    case 'RESET':
      peer.close();
      return connect(local_stream);
    case 'WAIT':
      return console.log('WAIT');
    case 'FULL':
      return alert("There's already 2 persons for this uuid");
  }
};

$(function() {
  ws = new WebSocket('wss://' + document.location.host + '/ws' + location.pathname);
  ws.onopen = function() {
    return console.log("WebSocket open", arguments);
  };
  ws.onclose = function() {
    return console.log("WebSocket closed", arguments);
  };
  ws.onerror = function() {
    return console.log("WebSocket error", arguments);
  };
  return ws.onmessage = ws_message;
});
