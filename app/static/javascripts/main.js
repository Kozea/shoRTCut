// Generated by CoffeeScript 1.6.3
(function() {
  var FileBuilder, LocalChatChannel, LocalFileChannel, RTCTest, RemoteChatChannel, RemoteFileChannel, chat, chat_send, chunks, file_send,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  chunks = function(size, chunk) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; chunk > 0 ? _i <= size : _i >= size; i = _i += chunk) {
      _results.push([i, Math.min(i + chunk, size)]);
    }
    return _results;
  };

  chat = function(text, type) {
    var $sb;
    if (type == null) {
      type = 'text';
    }
    $sb = $('.scrollback');
    $sb.append($('<div>')[type](text));
    return $sb.stop(true, true).animate({
      scrollTop: $sb.prop('scrollHeight') - $sb.height()
    });
  };

  chat_send = null;

  file_send = null;

  RemoteChatChannel = (function(_super) {
    __extends(RemoteChatChannel, _super);

    function RemoteChatChannel() {
      RemoteChatChannel.__super__.constructor.apply(this, arguments);
      chat_send = this.send.bind(this);
    }

    RemoteChatChannel.prototype.open = function() {
      RemoteChatChannel.__super__.open.apply(this, arguments);
      return chat('Chat Connected');
    };

    RemoteChatChannel.prototype.close = function() {
      RemoteChatChannel.__super__.close.apply(this, arguments);
      return chat('Chat Connection closed.');
    };

    return RemoteChatChannel;

  })(ShoRTCut.prototype.Channel);

  LocalChatChannel = (function(_super) {
    __extends(LocalChatChannel, _super);

    function LocalChatChannel() {
      LocalChatChannel.__super__.constructor.apply(this, arguments);
    }

    LocalChatChannel.prototype.open = function() {
      LocalChatChannel.__super__.open.apply(this, arguments);
      return $('input[name=local]').attr('disabled', null).on('keyup', function(e) {
        if (e.keyCode === 13 && $(this).val()) {
          chat_send('CHAT', $(this).val());
          chat('me   < ' + $(this).val());
          return $(this).val('');
        }
      });
    };

    LocalChatChannel.prototype.CHAT = function(message) {
      return chat('peer > ' + message);
    };

    LocalChatChannel.prototype.close = function() {
      LocalChatChannel.__super__.close.apply(this, arguments);
      return $('input[name=local]').attr('disabled', 'disabled').off('keyup');
    };

    return LocalChatChannel;

  })(ShoRTCut.prototype.Channel);

  RemoteFileChannel = (function(_super) {
    __extends(RemoteFileChannel, _super);

    function RemoteFileChannel() {
      RemoteFileChannel.__super__.constructor.apply(this, arguments);
      file_send = this.send.bind(this);
    }

    RemoteFileChannel.prototype.open = function() {
      RemoteFileChannel.__super__.open.apply(this, arguments);
      return chat('File Connected');
    };

    RemoteFileChannel.prototype.close = function() {
      RemoteFileChannel.__super__.close.apply(this, arguments);
      return chat('File Connection closed.');
    };

    return RemoteFileChannel;

  })(ShoRTCut.prototype.Channel);

  FileBuilder = (function() {
    function FileBuilder(name, type) {
      this.name = name;
      this.type = type;
      this.parts = [];
    }

    FileBuilder.prototype.append = function(part) {
      return this.parts.push(part);
    };

    FileBuilder.prototype.url = function() {
      return URL.createObjectURL(new Blob(this.parts, {
        type: this.type
      }));
    };

    return FileBuilder;

  })();

  LocalFileChannel = (function(_super) {
    __extends(LocalFileChannel, _super);

    function LocalFileChannel() {
      LocalFileChannel.__super__.constructor.apply(this, arguments);
    }

    LocalFileChannel.prototype.open = function() {
      LocalFileChannel.__super__.open.apply(this, arguments);
      return $('.filedrop').addClass('active').on('dragover', function(e) {
        $(this).addClass('hover');
        e = e.originalEvent;
        e.stopPropagation();
        e.preventDefault();
        e.dataTransfer.dropEffect = 'copy';
        return false;
      }).on('dragleave', function(e) {
        return $(this).removeClass('hover');
      }).on('drop', function(e) {
        var file, file_reader, files, read, slices;
        $(this).removeClass('hover');
        e = e.originalEvent;
        e.stopPropagation();
        e.preventDefault();
        if (!$(this).hasClass('active')) {
          return;
        }
        files = e.dataTransfer.files;
        file = files[0];
        slices = chunks(file.size, 1024 * 10);
        file_send("FILE|" + file.size + "," + file.type + "," + slices.length + "," + file.name);
        file_reader = new FileReader();
        file_reader.onload = function(e) {
          file_send(e.target.result);
          return read();
        };
        (read = function() {
          var end, slice, start;
          slice = slices.shift();
          if (slice) {
            start = slice[0], end = slice[1];
            return file_reader.readAsArrayBuffer(file.slice(start, end));
          } else {
            return file_send("DONE");
          }
        })();
        return false;
      });
    };

    LocalFileChannel.prototype.FILE = function(message) {
      var args, len, name, size, type;
      if (!$('.filedrop').hasClass('active')) {
        return;
      }
      $(this).removeClass('active');
      if (this.file_builder) {
        this.error('Already receiving', this.file_builder);
        return;
      }
      args = message.split(',');
      size = args.shift();
      type = args.shift();
      len = args.shift();
      name = args.join(',');
      chat("Receiving file " + name + " of size " + size + " (" + len + " parts expected)");
      return this.file_builder = new FileBuilder(name, type);
    };

    LocalFileChannel.prototype.BINARY = function(message) {
      return this.file_builder.append(message);
    };

    LocalFileChannel.prototype.DONE = function() {
      chat("peer > File: <a href=\"" + (this.file_builder.url()) + "\" download=\"" + this.file_builder.name + "\">" + this.file_builder.name + "</a>", 'html');
      chat_send('CHAT', 'File sent !');
      $('.filedrop').addClass('active');
      return this.file_builder = null;
    };

    LocalFileChannel.prototype.close = function() {
      LocalFileChannel.__super__.close.apply(this, arguments);
      return $('.filedrop').removeClass('active').off('dragover').off('dragleave').off('drop');
    };

    return LocalFileChannel;

  })(ShoRTCut.prototype.Channel);

  RTCTest = (function(_super) {
    __extends(RTCTest, _super);

    function RTCTest() {
      RTCTest.__super__.constructor.apply(this, arguments);
      this.LocalChatChannel = LocalChatChannel;
      this.RemoteChatChannel = RemoteChatChannel;
      this.LocalFileChannel = LocalFileChannel;
      this.RemoteFileChannel = RemoteFileChannel;
    }

    RTCTest.prototype.assign_local_stream_url = function(url) {
      chat('Local video connected');
      return $('video.local').attr('src', url);
    };

    RTCTest.prototype.assign_remote_stream_url = function(url) {
      chat('Remote video connected');
      return $('video.remote').attr('src', url);
    };

    RTCTest.prototype.reset = function() {
      RTCTest.__super__.reset.apply(this, arguments);
      chat('--');
      chat('Reset');
      return chat('--');
    };

    RTCTest.prototype.caller = function() {
      return $('h1').text('shoRTCut - caller');
    };

    RTCTest.prototype.callee = function() {
      return $('h1').text('shoRTCut - callee');
    };

    return RTCTest;

  })(ShoRTCut);

  $(function() {
    var rtctest;
    rtctest = new RTCTest();
    rtctest.start();
    chat('Connecting...');
    return window.rtc = rtctest;
  });

}).call(this);
