// Generated by CoffeeScript 1.6.3
(function() {
  var DiskFileReceiver, FileHelper, FileReceiver, FileSender, MemoryFileReceiver, ShoRTCutHelpers, bytes, chunk_size, getFileReceiver, rfs, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  rfs = window.requestFileSystem || window.webkitRequestFileSystem;

  chunk_size = 16000;

  FileHelper = (function(_super) {
    __extends(FileHelper, _super);

    function FileHelper() {
      _ref = FileHelper.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FileHelper.prototype.chunks = function(size) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; chunk_size > 0 ? _i <= size : _i >= size; i = _i += chunk_size) {
        _results.push([i, Math.min(i + chunk_size, size)]);
      }
      return _results;
    };

    return FileHelper;

  })(ShoRTCut.prototype.Loggable);

  FileSender = (function(_super) {
    __extends(FileSender, _super);

    function FileSender(file, send, end, progress) {
      var _this = this;
      this.file = file;
      this.send = send;
      this.end = end;
      this.progress = progress;
      this.reader = new FileReader();
      this.reader.onload = function(e) {
        _this.send(e.target.result);
        return _this.read();
      };
      this.slices = this.chunks(file.size);
      this.length = this.slices.length;
      this.read();
    }

    FileSender.prototype.read = function() {
      var end, slice, start;
      slice = this.slices.shift();
      if (typeof this.progress === "function") {
        this.progress(100 * (this.length - this.slices.length) / this.length);
      }
      if (slice) {
        start = slice[0], end = slice[1];
        return this.reader.readAsArrayBuffer(this.file.slice(start, end));
      } else {
        this.end();
        return false;
      }
    };

    return FileSender;

  })(FileHelper);

  FileReceiver = (function(_super) {
    __extends(FileReceiver, _super);

    function FileReceiver(name, size, type, ready, end, progress) {
      this.name = name;
      this.size = size;
      this.type = type;
      this.ready = ready;
      this.end = end;
      this.progress = progress;
      this.parts = [];
      this.length = 0;
    }

    FileReceiver.prototype.add = function(part) {
      this.parts.push(part);
      this.length += part.byteLength;
      return typeof this.progress === "function" ? this.progress(this.length) : void 0;
    };

    FileReceiver.prototype.url = function() {
      return 'about:blank';
    };

    return FileReceiver;

  })(FileHelper);

  DiskFileReceiver = (function(_super) {
    __extends(DiskFileReceiver, _super);

    DiskFileReceiver.prototype.flush_length = 16;

    function DiskFileReceiver() {
      var _this = this;
      DiskFileReceiver.__super__.constructor.apply(this, arguments);
      this.flushing = false;
      this.callbacks = [];
      rfs(TEMPORARY, this.size, function(fs) {
        var get_file;
        get_file = function() {
          return fs.root.getFile(_this.name, {
            create: true,
            exclusive: true
          }, function(entry) {
            _this.entry = entry;
            return _this.entry.createWriter(function(fw) {
              _this.fw = fw;
              _this.fw.onwriteend = function() {
                var _base, _ref1;
                _this.flushing = false;
                return (_ref1 = _this.callbacks) != null ? typeof (_base = _ref1.shift()) === "function" ? _base() : void 0 : void 0;
              };
              return _this.ready();
            }, _this.error.bind(_this));
          }, _this.error.bind(_this));
        };
        return fs.root.getFile(_this.name, {
          create: false
        }, function(entry) {
          return entry.remove(get_file, _this.error.bind(_this));
        }, get_file);
      }, this.error.bind(this));
    }

    DiskFileReceiver.prototype.add = function(part) {
      var parts,
        _this = this;
      DiskFileReceiver.__super__.add.apply(this, arguments);
      if (this.parts.length >= DiskFileReceiver.prototype.flush_length || this.length >= this.size) {
        if (this.flushing) {
          parts = this.parts;
          this.callbacks.push(function() {
            return _this.flush(parts);
          });
        }
        if (this.length >= this.size) {
          this.callbacks.push(this.end);
        }
        if (!this.flushing) {
          this.flush(this.parts);
        }
        return this.parts = [];
      }
    };

    DiskFileReceiver.prototype.flush = function(parts) {
      if (!parts.length) {
        return;
      }
      if (this.flushing) {
        this.error("Can't flush, already flushing");
      }
      this.flushing = true;
      this.fw.seek(this.fw.length);
      return this.fw.write(new Blob(parts, {
        type: this.type
      }));
    };

    DiskFileReceiver.prototype.url = function() {
      return this.entry.toURL();
    };

    return DiskFileReceiver;

  })(FileReceiver);

  MemoryFileReceiver = (function(_super) {
    __extends(MemoryFileReceiver, _super);

    function MemoryFileReceiver() {
      MemoryFileReceiver.__super__.constructor.apply(this, arguments);
      this.ready();
    }

    MemoryFileReceiver.prototype.add = function(part) {
      MemoryFileReceiver.__super__.add.apply(this, arguments);
      if (this.length >= this.size) {
        return this.end();
      }
    };

    MemoryFileReceiver.prototype.url = function() {
      return URL.createObjectURL(new Blob(this.parts, {
        type: this.type
      }));
    };

    return MemoryFileReceiver;

  })(FileReceiver);

  getFileReceiver = function() {
    if (rfs) {
      return DiskFileReceiver;
    } else {
      return MemoryFileReceiver;
    }
  };

  bytes = function(size) {
    var byteUnits, i;
    i = -1;
    byteUnits = 'kMGTPEZY';
    while (true) {
      size /= 1000;
      i++;
      if (!(size > 1000)) {
        break;
      }
    }
    return "" + (Math.max(size, 0.1).toFixed(1)) + " " + (byteUnits[i] || '?') + "B";
  };

  ShoRTCutHelpers = (function() {
    function ShoRTCutHelpers() {}

    ShoRTCutHelpers.prototype.FileSender = FileSender;

    ShoRTCutHelpers.prototype.FileReceiver = FileReceiver;

    ShoRTCutHelpers.prototype.DiskFileReceiver = DiskFileReceiver;

    ShoRTCutHelpers.prototype.MemoryFileReceiver = MemoryFileReceiver;

    ShoRTCutHelpers.prototype.getFileReceiver = getFileReceiver;

    ShoRTCutHelpers.prototype.bytes = bytes;

    return ShoRTCutHelpers;

  })();

  this.ShoRTCutHelpers = ShoRTCutHelpers;

}).call(this);
